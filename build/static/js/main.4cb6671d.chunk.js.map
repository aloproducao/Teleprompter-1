{"version":3,"sources":["inputfile.js","serviceWorker.js","index.js","logo.svg"],"names":["InputFile","props","context","handleChange","bind","e","this","onChange","type","React","Component","Boolean","window","location","hostname","match","getSeconds","s","p","split","length","parseInt","parseFloat","CCEntry","i","r","parts","state","index","range","start","end","prompt","handleMouseDown","target","contentEditable","key","className","onMouseDown","CCTable","entries","loadFile","text","lines","pos","count","isNaN","trim","push","setState","onsrtloaded","file","files","reader","FileReader","foo","onload","parseSrt","result","readAsText","rows","render","id","value","accept","handle_resize","CCVideo","url","handleVideoUrlChange","videourl","video","$","pause","load","play","classname","controls","src","href","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4cb6671d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass InputFile extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e)\r\n    {\r\n        if (this.props.onChange)\r\n        {\r\n            this.props.onChange(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <input type='file' onChange={ this.handleChange } />;\r\n    }\r\n}\r\n\r\n\r\nexport default InputFile;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InputFile from './inputfile';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveAs } from 'file-saver';\nimport $ from 'jquery';\n\nfunction getSeconds(s) {\n  var p = s.split(':');\n  if (p.length === 3) {\n    var hours = parseInt(p[0]);\n    var minutes = parseInt(p[1]);\n    var seconds = parseFloat(p[2]);\n    return (hours * 3600) + (minutes * 60) + seconds;\n  }\n  return 0;\n}\n\nclass CCEntry extends React.Component\n{\n  constructor(props, i, r, p)\n  {\n    super(props);\n\n    var s = \"\";\n    var e = \"\";\n    var parts = r.split(\"-->\");\n    if (parts.length === 2) {\n      s = parts[0];\n      e = parts[1];\n    }\n\n    this.state = {index: i, range: r, start: getSeconds(s), end: getSeconds(e), prompt: p};\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n  }\n\n  handleMouseDown(e){\n    e.target.contentEditable = true;\n  }\n\n  render() {\n    return <div key={this.state.index}>\n      <div className=\"srt-range\">{this.state.range}</div>\n      <xmp className=\"srt-prompt\" onMouseDown={this.handleMouseDown} >{this.state.prompt}</xmp>\n    </div>;\n  }\n}\n\nclass CCTable extends React.Component\n{\n  constructor(props) {\n    super(props);\n    this.state = {entries: []};\n    this.loadFile = this.loadFile.bind(this)\n  }\n\n  parseSrt(text)\n  {\n    var entries = []\n    var lines = text.split(\"\\n\");\n    var pos = 0;\n    var count = lines.length;\n    while (pos < count)\n    {\n      var index = parseInt(lines[pos++]);\n      if (isNaN(index) || pos >= count) {\n        break;\n      }\n      var range = lines[pos++].trim();\n      if (pos >= count) {\n        break;\n      }\n      // consume the entire prompt up to next blank line.\n      var prompt = lines[pos++].trim();\n      while (pos < count && lines[pos].trim() !== \"\")\n      {\n        prompt += '\\n' + lines[pos++].trim();\n      }\n\n      // skip blank lines.\n      while (pos < count && lines[pos].trim() === \"\"){\n        pos++;\n      }\n\n      entries.push(new CCEntry({}, index, range, prompt));\n    }\n    this.setState({entries: entries});\n\n    if (window.onsrtloaded){\n      // give this to index.html...\n      window.onsrtloaded(entries);\n    }\n\n    return entries;\n  }\n\n  loadFile(e) {\n    var file = e.target.files[0];\n    window.file = file;\n    var reader = new FileReader();\n    var foo = this;\n    reader.onload = function(e) {\n      foo.parseSrt(e.target.result);\n    };\n\n    // Read in the srt file as a data URL.\n    reader.readAsText(file);\n  }\n\n  render() {\n    const rows = [];\n    let i;\n    for (i = 0; i < this.state.entries.length; i++)\n    {\n      rows.push(this.state.entries[i].render());\n    }\n    return <div className=\"srt-wrapper\">\n      <div>\n        SRT location:<br/>\n        <InputFile id=\"SrtUrl\" value=\"\" className=\"fileprompt\" accept=\".srt, .txt\"\n               onChange={ this.loadFile } />\n      </div>\n      <div id=\"ccEntries\" className=\"srt-table\" >\n        {rows}\n      </div>\n    </div>;\n  }\n\n  componentDidUpdate(){\n    if (window.handle_resize){\n      window.handle_resize();\n    }\n  }\n}\n\nclass CCVideo extends React.Component\n{\n\n  constructor(props) {\n    super(props);\n    this.state = {url: \"https://microsoft.sharepoint.com/teams/MSROutreachOnlineEngagement/Shared Documents/Webinars/Episodes/11. Project Coyote/Video/Chris_Lovett-Webinar_V3_CBR_2020-04-15.mp4\"};\n    this.handleVideoUrlChange = this.handleVideoUrlChange.bind(this)\n\n  }\n\n  handleVideoUrlChange(e) {\n    var videourl = e.target.value;\n    this.setState({url: videourl});\n    //var videoplayersrc  = $(\"#videoplayersrc\")[0];\n    //videoplayersrc.setAttribute(\"src\", videourl.value);\n    var video  = $(\"#videoplayer\")[0];\n    video.pause();\n    try {\n      video.load();\n      video.play();\n    } catch {\n      // bad url...\n    }\n  }\n\n  render() {\n    return <div classname=\"half-width\">\n    <div>\n      Video location:<br/>\n      <input type=\"url\" id=\"videourl\" value={this.state.url} className=\"half-width\" onChange={this.handleVideoUrlChange}/>\n    </div>\n    <video id=\"videoplayer\" className=\"embed-responsive-item half-width\" controls >\n        <source id=\"videoplayersrc\"\n          className=\"embed-responsive-item\"\n          src={this.state.url}\n          type=\"video/mp4\"/>\n    </video>\n    <p>\n        There is an <a href=\"http://lovettsoftware.com/Teleprompter/Chris_Lovett-Webinar_V2_2020-04-18.srt\">example SRT file</a>\n        that you can download and try.\n    </p>\n  </div>;\n  }\n\n}\n\nReactDOM.render(\n  <section>\n    <CCTable></CCTable>\n    <CCVideo></CCVideo>\n  </section>,\n  document.getElementById('react-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}